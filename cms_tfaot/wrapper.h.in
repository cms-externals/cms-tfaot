#ifndef ${INCLUDE_GUARD_UC}_${PREFIX_UC}_H
#define ${INCLUDE_GUARD_UC}_${PREFIX_UC}_H

/*
 * Auto-generated AOT wrapper for
 *   model path  : ${MODEL_PATH}
 *   prefix      : ${PREFIX}
 *   namespace   : ${NAMESPACE}
 *   class name  : ${CLASS_NAME}
 *   batch sizes : ${BATCH_SIZES_CSV}
 */

#include "PhysicsTools/TensorFlowAOT/interface/Wrapper.h"

// model headers
// foreach=MODEL lines=1
#include "${PREFIX}_bs${BATCH_SIZE}.h"

namespace ${NAMESPACE} {

  class ${CLASS_NAME} : public tfaot::Wrapper {
  public:
    // default constructor
    explicit ${CLASS_NAME}(const std::string& name = "${NAMESPACE}_${CLASS_NAME}")
      : tfaot::Wrapper(name)
      // foreach=MODEL lines=1
      , xla_function_bs${BATCH_SIZE}_(allocMode())
    {
    }

    // disable copy constructor
    ${CLASS_NAME}(const ${CLASS_NAME}&) = delete;

    // disable assigment operator
    ${CLASS_NAME}& operator=(const ${CLASS_NAME}&) = delete;

    // disable move operator
    ${CLASS_NAME}& operator=(${CLASS_NAME}&&) = delete;

    // destructor
    ~${CLASS_NAME}() = default;

    // registered batch sizes, sorted by default
    const std::vector<size_t>& batchSizes() const {
      static const std::vector<size_t> batchSizes = {${BATCH_SIZES_CSV}};
      return batchSizes;
    }

    // number of input arguments
    size_t nArgs() const { return ${N_ARGS}; }

    // number of elements in arguments per batch size
    const std::map<size_t, std::vector<size_t>>& argCounts() const {
      static const std::map<size_t, std::vector<size_t>> argCounts = {
          // foreach=MODEL lines=1
          {${BATCH_SIZE}, {${ARG_COUNTS_CSV}}},
      };
      return argCounts;
    }

    // number of elements in arguments, divided by batch size
    const std::vector<size_t>& argCountsNoBatch() const {
      static const std::vector<size_t> argCountsNoBatch = {${ARG_COUNTS_NO_BATCH_CSV}};
      return argCountsNoBatch;
    }

    // pointer to argument data
    template <typename T>
    T* argData(size_t batchSize, size_t argIndex);

    // const pointer to argument data
    template <typename T>
    const T* argData(size_t batchSize, size_t argIndex) const;

    // number for output results
    size_t nResults() const { return ${N_RES}; }

    // number of elements in results per batch size
    const std::map<size_t, std::vector<size_t>>& resultCounts() const {
      static const std::map<size_t, std::vector<size_t>> resultCounts = {
          // foreach=MODEL lines=1
          {${BATCH_SIZE}, {${RES_COUNTS_CSV}}},
      };
      return resultCounts;
    }

    // number of elements in results, divided by batch size
    const std::vector<size_t>& resultCountsNoBatch() const {
      static const std::vector<size_t> resultCountsNoBatch = {${RES_COUNTS_NO_BATCH_CSV}};
      return resultCountsNoBatch;
    }

    // pointer to result data
    template <typename T>
    T* resultData(size_t batchSize, size_t resultIndex);

    // const pointer to result data
    template <typename T>
    const T* resultData(size_t batchSize, size_t resultIndex) const;

    // model evaluation
    bool runSilent(size_t batchSize);

  private:
    // xla function instances
    // foreach=MODEL lines=1
    ${NAMESPACE}::${CLASS_NAME}_bs${BATCH_SIZE} xla_function_bs${BATCH_SIZE}_;
  };

  template <typename T>
  T* ${CLASS_NAME}::argData(size_t batchSize, size_t argIndex) {
    // foreach=MODEL lines=2
    if (batchSize == ${BATCH_SIZE})
      return static_cast<T*>(xla_function_bs${BATCH_SIZE}_.arg_data(argIndex));
    unknownBatchSize(batchSize, "argData()");
    return nullptr;
  }

  template <typename T>
  const T* ${CLASS_NAME}::argData(size_t batchSize, size_t argIndex) const {
    // foreach=MODEL lines=2
    if (batchSize == ${BATCH_SIZE})
      return static_cast<const T*>(xla_function_bs${BATCH_SIZE}_.arg_data(argIndex));
    unknownBatchSize(batchSize, "const argData()");
    return nullptr;
  }

  template <typename T>
  T* ${CLASS_NAME}::resultData(size_t batchSize, size_t resultIndex) {
    // foreach=MODEL lines=2
    if (batchSize == ${BATCH_SIZE})
      return static_cast<T*>(xla_function_bs${BATCH_SIZE}_.result_data(resultIndex));
    unknownBatchSize(batchSize, "resultData()");
    return nullptr;
  }

  template <typename T>
  const T* ${CLASS_NAME}::resultData(size_t batchSize, size_t resultIndex) const {
    // foreach=MODEL lines=2
    if (batchSize == ${BATCH_SIZE})
      return static_cast<const T*>(xla_function_bs${BATCH_SIZE}_.result_data(resultIndex));
    unknownBatchSize(batchSize, "const resultData()");
    return nullptr;
  }

  bool ${CLASS_NAME}::runSilent(size_t batchSize) {
    // foreach=MODEL lines=2
    if (batchSize == ${BATCH_SIZE})
      return xla_function_bs${BATCH_SIZE}_.Run();
    unknownBatchSize(batchSize, "runSilent()");
    return false;
  }

}  // namespace ${NAMESPACE}

#endif  // ${INCLUDE_GUARD_UC}_${PREFIX_UC}_H
